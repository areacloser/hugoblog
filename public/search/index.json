[{"content":"时事杂谈 补坑 对我国开源现状的反思 | 小窝\n一年前，我曾愤慨地写下一些文字来“针砭时弊”，但“年与时驰，意与日去”，世事变迁，我的心态也发生了转变，在此记录一下感受。\nCEC-IDE 这个是最没意思的，网站下架了，看热闹的走了，也没有后续，就当是闹剧一场吧。\n博客园 博客园终于是活下来了，还活得很好（大概是得到了字节等金主的支持），这确实令人欣慰。最近我还注册了个帐号，开了个人博客，一切都很好。\nGitCode 感想 我不得不说，我错怪GitCode了，我将收回一年前的话，这并不是因为GitCode是无辜的或者悔过自新了，而是我发现了它的新玩法——图床（没错，我在网站更新日志中写的”稳定图床“就是它）！之前我翻遍各大网站，用尽各种搜索引擎都找不到的图床（包括但不限于GitHub，知乎，B站），竟然就藏身于我深恶痛疾之处，确实是有些戏剧性。\n使用方法 非常简单，只需要创建一个仓库，向上面上传图片，然后引用raw就可以了，但由于GitCode功能简陋，不能像Github一样在网页直接上传，必须通过git来push到远程仓库去，对于我这个没怎么用过git的确实不熟悉，Gitcode给了小白教程，这里就附上一点吧。\n1 2 3 4 5 git clone https://gitcode.com/username/repo.git cd repo git add . git commit -m \u0026#34;第一次提交\u0026#34; git push -u origin 现在 《731》之神秘评分消失术 9月18号的电影，到现在十多天了，票房十几亿了，豆瓣评分还是”暂无“，隔壁刚上映四天的《刺杀小说家2》都有评分了，这边不知是出了什么状况？是评分状况太难看了么？\n","date":"2025-10-04T12:25:08Z","image":"https://tc.alcy.cc/q/20250908/80311d6ec243ec832965432196879333.webp","permalink":"https://example.com/post/new-thoughts-throughout-the-year/","title":"一年来的新感想"},{"content":"前言 Arch Linux 和 Gentoo Linux 都是面向高级用户的 Linux 发行版，强调定制性和控制力，但设计哲学和技术实现差异显著。以下从核心特点、适用场景和典型差异展开分析：\n分析 🐧 一、Arch Linux 的特点 极简主义与用户掌控（KISS 原则）\n默认安装仅包含基础核心组件（无图形界面、无预装软件），用户需手动配置所有部件（如桌面环境、驱动、网络工具）。 避免发行版维护者的“魔改”，软件保持上游原生版本，提供纯净体验。 滚动更新与最新软件\n采用滚动发布模型，持续推送更新，用户始终使用最新版内核和软件（如 LibreOffice、GNOME 等）。 优势：安全补丁和功能更新极快（通常数日内落地）；劣势：偶发更新冲突需手动干预。 强大的包管理与生态\nPacman 包管理器：命令简洁高效（如 pacman -Syu 更新系统）。 AUR（Arch User Repository）：社区驱动的软件仓库，覆盖超10万第三方应用（如Spotify、WPS），通过 yay 等工具一键安装。 文档与社区支持\nArch Wiki 被公认为 Linux 最强文档库，内容覆盖安装、调优及故障排查，甚至其他发行版用户也常参考。 适用场景\n适合追求轻量、最新软件且希望深度定制的用户。 典型用户：开发者、技术爱好者、希望摆脱商业发行版影响的自由主义者。 🐧 二、Gentoo Linux 的特点 源代码编译与极致优化\n所有软件默认从源代码编译安装，用户可通过 USE 标志启用/禁用功能（如移除 KDE 依赖的蓝牙模块）。 支持硬件级优化：通过 CFLAGS（如 -march=native）针对 CPU 指令集编译，提升性能10%~30%。 Portage 包管理系统\n使用 ebuild 脚本管理依赖与编译流程，支持高度灵活的组合（例如混合安装二进制包与自编译包）。 新增官方二进制包支持（2024年起），涵盖核心系统及 KDE/GNOME 等桌面环境，显著减少编译时间。 元发行版定位\n被称为“元发行版”（meta-distribution），可适配10+硬件架构（x86、ARM、PowerPC等），甚至替换C库（如 musl 替代 glibc）。 高门槛与学习价值\n安装需手动分区、编译内核、配置引导程序，耗时可能达数小时至数天。 适合作为学习 Linux 内部机制的“实验室”，但需较强排错能力。 适用场景\n适合嵌入式开发、高性能计算（如科学计算集群）及极致精简系统（如容器镜像）。 典型用户：系统架构师、硬件优化爱好者、追求“绝对控制”的极客。 🧩 三、Arch vs Gentoo 关键对比 下表总结核心差异：\n维度 Arch Linux Gentoo Linux 设计哲学 轻量简洁 + 开箱即用（最小配置后） 源代码级定制 + 硬件优化 包管理 Pacman + AUR（预编译二进制包） Portage（源码编译为主，支持二进制包） 安装复杂度 中高（需CLI配置） 极高（需编译内核与核心组件） 更新模式 滚动更新（高频，偏重软件时效） 滚动更新（可分段编译，偏重稳定性调优） 定制程度 应用层定制（选择组件） 系统级定制（编译选项、依赖链） 硬件优化 通用优化（x86-64架构） 深度优化（支持多架构，CPU指令级调优） 适用场景 桌面/开发环境 服务器/嵌入式/高性能计算 社区资源 Arch Wiki（全网最强文档） Gentoo Handbook（技术细节丰富） 💎 四、总结建议 选 Arch Linux 若：你希望快速搭建高度定制的现代桌面，追求软件时效性，且能接受中阶学习曲线。 选 Gentoo Linux 若：你需要为特定硬件（如ARM设备）或场景（如超算集群）构建极致优化系统，并愿意投入编译与调试时间。 💡 两者均非新手友好，但Arch 更适合渐进式学习（从AUR到内核编译），Gentoo 更适合系统性深造（从USE标志到交叉编译）。若纠结，可先用Arch熟悉Linux生态，再挑战Gentoo以解锁“完全控制权”。\n","date":"2025-10-01T00:00:00Z","image":"https://raw.gitcode.com/areacloser/images-for-hugo-blog/raw/main/Gentoo-vs-Arch-Linux.webp","permalink":"https://example.com/post/arch-and-gentoo/","title":"Arch Linux 和 Gentoo Linux 各有什么特点"},{"content":"Alpine Linux：容器世界的轻量级基石 简约而不简单，轻量却功能完备\n在当今容器化和云计算的时代，我们常常被各种复杂的技术方案所包围。然而，在这片\u0026quot;臃肿\u0026quot;的技术景观中，有一个发行版以其极简主义哲学脱颖而出——它就是 Alpine Linux。今天，我们将深入探索这个轻量级但功能强大的Linux发行版，揭示它为何成为容器环境和嵌入式系统的首选。\n什么是Alpine Linux？ Alpine Linux是一个面向安全应用的轻量级Linux发行版，它基于musl libc和BusyBox构建。不同于主流的发行版，Alpine将简洁、安全和资源高效作为其核心设计理念。\n核心特性概览 特性 优势 适用场景 小巧的体积 基础镜像仅约5MB 容器化部署、微服务 强大的安全性 主动安全策略与补丁管理 生产环境、安全敏感应用 简单的包管理 apk包管理器高效易用 开发环境、定制系统 musl libc 兼容性与性能优化 嵌入式系统、边缘计算 Alpine的核心组件解析 1. musl libc：替代Glibc的轻量级选择 与大多数Linux发行版使用Glibc不同，Alpine选择了musl libc作为其C标准库。这一选择带来了显著的优势：\n1 2 3 4 5 6 7 // musl libc 提供了简洁高效的API实现 #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Alpine Linux musl libc 环境\\n\u0026#34;); return 0; } musl的设计哲学强调代码简洁、标准合规和安全性，这使得它在资源受限的环境中表现出色。\n2. BusyBox：全能的多合一工具集 BusyBox将数百个常见的Unix命令集成到一个单一的可执行文件中，实现了功能的完整性与体积的最小化之间的完美平衡。\n1 2 3 4 # 在Alpine中使用BusyBox的基本命令示例 $ ls -la $ cat /etc/alpine-release $ echo \u0026#34;当前用户: $(whoami)\u0026#34; 3. apk包管理器：高效简单的软件管理 apk是Alpine的包管理工具，其语法简洁直观：\n1 2 3 4 5 6 7 8 9 10 11 # 更新软件包索引 apk update # 安装软件包 apk add nginx python3 nodejs # 搜索软件包 apk search mysql # 删除软件包 apk del nano apk工具的设计体现了Alpine的哲学：简单直接、没有不必要的装饰。\n在容器环境中使用Alpine的优势 资源效率对比 让我们比较不同基础镜像的大小：\n基础镜像 大小 启动时间 内存占用 Alpine Linux ~5MB \u0026lt; 3秒 \u0026lt; 10MB Ubuntu Minimal ~50MB ~10秒 ~50MB CentOS ~200MB ~15秒 ~100MB 这种资源效率使Alpine成为高密度部署和微服务架构的理想选择。\n安全增强特性 Aline Linux提供了多项安全增强功能：\n非root容器支持：通过减少特权来降低攻击面 最小化攻击面：仅安装必需的软件包 主动安全更新：及时修补已知漏洞 实际应用示例 创建Alpine基础的Docker镜像 以下是一个基于Alpine的Node.js应用Dockerfile示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 使用多阶段构建优化镜像大小 FROM node:16-alpine AS builder WORKDIR /app COPY package*.json ./ RUN npm ci --only=production # 生产阶段 FROM alpine:latest RUN apk add --no-cache nodejs RUN addgroup -g 1001 -S nodejs \u0026amp;\u0026amp; adduser -S nodejs -u 1001 WORKDIR /app COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules COPY --chown=nodejs:nodejs . . USER nodejs EXPOSE 3000 CMD [\u0026#34;node\u0026#34;, \u0026#34;index.js\u0026#34;] 这种多阶段构建方法可以生成极其精简且安全的 production 镜像。\n系统管理实用命令 在Alpine中执行系统管理任务的常用命令：\n1 2 3 4 5 6 7 8 9 10 11 12 # 查看系统信息 cat /etc/os-release # 管理服务 rc-service nginx status rc-service nginx restart # 管理系统启动项 rc-update add nginx # 查看日志 tail -f /var/log/messages Alpine的进阶使用技巧 1. 自定义ISO构建 Alpine提供了强大的自定义构建工具，允许用户创建包含特定软件包和配置的定制镜像：\n1 2 3 4 5 6 7 8 # 配置软件仓库源 echo \u0026#34;http://dl-cdn.alpinelinux.org/alpine/v3.16/main\u0026#34; \u0026gt; /etc/apk/repositories # 安装构建工具 apk add alpine-sdk build-base apk-tools # 创建自定义构建 git clone git://git.alpinelinux.org/aports 2. 内核优化与硬件支持 尽管体积小巧，Alpine支持广泛的内核模块和硬件驱动：\n轻量级桌面环境：虽然主要面向服务器和容器，但Alpine可以运行Xfce、Openbox等轻量级桌面环境 嵌入式设备支持：针对树莓派等嵌入式设备有专门的镜像和优化 虚拟化增强：对KVM、Docker等虚拟化环境有良好支持 结语 Alpine Linux向我们证明，在技术世界中**\u0026ldquo;更少\u0026quot;往往意味着\u0026quot;更多\u0026rdquo;**——更少的资源消耗带来更高的部署密度，更少的攻击面带来更强的安全性，更少的复杂度带来更高的可靠性。\n正如Alpine的座右铭所言：\u0026ldquo;小而简\u0026rdquo;（Small. Simple. Secure）。这不仅是技术选择，更是一种哲学立场：在追求功能丰富性的同时，不应忽视简洁性和专注度的价值。\n简单性是可靠性的先决条件 — Edsger W. Dijkstra\n无论是构建下一代云原生应用，还是为嵌入式设备寻找可靠的系统基础，Alpine Linux都提供了一个值得认真考虑的轻量级解决方案。在技术日益复杂的今天，或许正是这种\u0026quot;少即是多\u0026quot;的哲学，能够帮助我们构建更加可持续和可维护的系统。\n本文使用Hugo的Stack主题生成，如需了解更多Markdown语法技巧，请参阅[Hugo-GeekBlog项目中的Markdown语法完全指南]。\n","date":"2025-09-30T12:12:21Z","image":"https://raw.gitcode.com/areacloser/images-for-hugo-blog/raw/main/alpine.png","permalink":"https://example.com/post/alpine-installation/","title":"Alpine Linux 安装教程"},{"content":"前言 先展示一下成果 ~\nNeofetch一下\nLX Music\n仔细算算，我花在这个虚拟机上的时间已经超过了15个小时，真可谓道阻且长！\n话不多说，下面就是正文了\n开始之前 系统信息 我使用的宿主机是Windows7系统，硬件比较古早，这里只展示部分信息：\n项目 值 CPU Intel i5-2400 内存 8 GB 显示适配器 Intel(R) HD Graphics 软件安装 安装之前的准备 在最最开始前，必不可少的是打开CPU功能中的虚拟化功能（Intel VT-x 或 Hyper-V），不然虚拟机的功能无法正常实现。不过好像这个功能大部分计算机是默认开启的（比如我就读高中的班级电脑），可是我家电脑却不默认开启。\n想要开启它，须要进入BIOS设置界面，常规做法是在开机出现Logo时按下F2键，但我家电脑要按Del键，这由主板型号而定。具体可参考这篇文章。\nSSH \u0026amp; VNC 连接软件 虚拟机自带的用户界面实在难以入眼，加之后续需要建立VNC连接，找一个合适的远程连接软件是必要的。\n大部分人SSH连接都会选择使用 XShell， 但它有两个缺点：\n不支持VNC连接 终端配色有时会出问题（如运行Neovim时） 因而此处我推荐使用 MobaXterm 作为替代，它虽然没有汉化，但能完美解决 XShell 的问题。\n虚拟机软件 市面上常用的虚拟机软件有两个：VirtualBox 和 VMWare。\n如果各位和我一样是Windows7的钉子户的话，那么请务必 不 要 使用VirtualBox！虽然它免费开源，但它出的问题不是我们能够解决的（不支持Windows7）。至于收费的VMWare，我想大家应当能各显神通，找到合适的学习版。不过使用Windows7的同学们又要注意了，VMWare在 Workstation 15 之后的版本后都不再支持Windows7，所以请不要找更高的版本了！\n镜像文件 官网的下载速度十分令人堪忧，建议使用清华镜像源来获取系统镜像。\nCLI界面 安装系统 具体教程可参考一下几篇教程，都写得很详细：\nVMware 虚拟机图文安装和配置 Ubuntu Server 22.04 LTS 教程 - 博客园 vmware中安装 ubuntu 22.04 live-server - 博客园 vmware 安装 ubuntu server 22.04.2 LTS记录 - 知乎 这里基本按着文章里的做就可以了，但有两点我要提醒：\n配置网络连接时建议先用DHCP（后面可以改回固定IP），不然可能会导致IP冲突。 配置磁盘空间时一定要至少分配40G的空间！不然后续安装图形化界面时会空间不足！这是我亲身经历的，它让我被迫一切从头开始，损失惨重！并且建议将所有的剩余空间（free-space）都用掉，反正留着也没用，不如都分配给根目录（/） 配置SSH连接 在进行SSH连接前，要先配置端口转发。同样，推荐一些文章教程：\n端口转发 VMware做NAT端口转发(全网最详细步骤) - CSDN VMware虚拟机配置端口转发（端口映射） - 博客园 然后是SSH配置：\nSSH 配置 Ubuntu 22.04.3 Server 安装sshd和开启root账号ssh远程 - CSDN 如何在 Ubuntu 上启用 SSH（适用于 20.04、22.04）？ - 阿里云 同样，我有一点要提醒，在SSH连接时，有可能出现Error503问题，即建立SSH连接后无法进入命令行界面。虽然其中的原因尚不明确，但是更换端口转发时的IP地址然后重新连接就能解决问题。\n更换地区和语言 正常情况下，刚安装好的Ubuntu的默认语言是英语，即locale是en。更换为中文不是必需的，但我仍然建议大家换掉，因为这会影响后续图形化的语言配置。当然，如果对自己的英语水平有足够的信心，就当我没说。\n想要更换语言，需要在命令行中执行以下操作1：\n1 2 sudo apt-get install language-pack-zh-hans sudo update-locale LANG=zh_CN.UTF-8 最后重启系统即可。\nGUI 界面 由于最开始安装的是Server版，所以此时的Ubuntu是没有图形化界面的，但是我们可以为其安装一个（甚至多个）桌面环境！而想要多快好省地完成这一重任，我们就要请出下面这个神器：\nTMOE（天萌管理器）\n没找到TMOE的图标就用二萌的头像代替了\n题外话 说到这里，我不得不提一下TMOE的作者2moe。TA虽然基本不再更新管理器，但一直在gitee社区活跃出现，而且十分负责地答疑解惑，确实非常有责任心！\n（在线催更TMOE2025）\n进入TMOE之前 在开始图形化之前，墙裂建议各位先切换为普通用户，如果一直使用root用户来安装软件会遇到许多不便（很多软件会因安全问题而停止运行）\n进入TMOE 安装桌面 Ubuntu虚拟机应该是默认自带curl下载器的，如果没有请使用以下命令安装curl：\n1 2 sudo apt update sudo apt install -y curl 然后键入以下命令安装TMOE管理器2：\n1 bash -c \u0026#34;$(curl -L gitee.com/mo2/linux/raw/2/2)\u0026#34; 接下来就是漫长的安装过程了，这里按照提示走就行，记得把下载源设置为gitee，不然速度会更酸爽。桌面环境我选择了Xfce，因为它够轻量，而且可定制性很强。还有一点，设置VNC时最好使用TigerVNC它的优化和功能都比TightVNC要好。\n还有一点，在配置完VNC后，记得回到虚拟机处再配置相应的端口转发。\n体验强大功能 到这里时，桌面应该就能在VNC中正常显示了，但可以看到它仍处于百废待兴的状态：\nVNC显示比例不合适 界面比较丑陋 默认浏览器打不开 应用十分稀少 而这些，TMOE中早已有了对策————所有这些问题都可以在上面一站式解决！（其实还需要一点场外援助）\n下面就可以自由探索TMOE并美化自己的终端和桌面了！在这里我提供一些思路供参考：\n去xfce-looks网站上下载主题和图标包并使用TMOE本地主题安装器来安装（推荐Orchis-Dark主题和Papirus-Dark图标包） 安装Chromium或Edge-dev浏览器 安装Terminology终端模拟器并将其设置为默认终端 安装Bingle以获取必应每日精选壁纸（有WE的去安装Steam更好） 安装Tmoe-Zsh强大Shell 更多 一些问题\u0026amp;解决方案 自动死机 这是我遇到的一个奇怪的问题。在桌面环境闲置一段时间后整个虚拟机会被自动挂起（suspend），即SSH和VNC乃至虚拟机界面全都卡死无法操作。在我眼中这跟死机没有任何不同，但之前在手机上使用PRoot容器配置桌面环境时从未出现过这个问题\n我尝试过禁用虚拟机的挂起功能，也曾尝试修改/etc/systemd/logind.conf{: .filepath}3，还查看过Xfce设置中的电源选项，但都无功而返。\n最后禁用了系统休眠服务就解决了，方法如下4：\n在终端中输入命令： 1 sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target 查看服务是否禁用成功： 1 sudo systemctl status sleep.target suspend.target hibernate.target hybrid-sleep.target 终端字体显示乱码 在安装Tmoe-Zsh（尤其是使用Powerlevel10k主题）后终端可能会出现乱码，像这样：\nX11的自带终端是真飞舞\n这时我们就需要找到一款合适的字体来显示其中的符号了，那就是————Nerd Fonts！\n这里推荐几款不错的字体，只要下载并安装它们，你的终端就会变得炫酷无比！\nInconsolata Inconsolata截图\nJetBrains Mono JetBrains Mono截图，说实话这个字体文件实在太大了\nFiraCode FiraCode截图\nroot情况下Electron应用打不开 这个解决方法比较简单，只需要在启动参数最后面加上--no-sandbox就可以了，不过浏览器会在顶部弹出警告栏，让人心烦。\n未完成的事情 配置编辑器 由于Ubuntu软件源比较落后，很多程序用apt都下不了最新版本，比如Neovim，通用稳定版都出到0.10了，Ubuntu还在倒腾0.6的版本。无奈我只能使用Unstable不稳定源，结果就是电脑上Neovim每天都更新而且bug奇多。\n已经彻底废了\n至于Emacs，我之前在手机上也曾尝试过配置，但仍以失败告终，现在它在我桌面上只是个摆设了。\n还有VSCode，我认为我的电脑没有这个能力运行。\n本地搭建个人网站 正如你所看到的，这个网站是经由Github Actions搭建，以及Github Pages部署和托管而成的，我曾尝试将工作环境转移到这台虚拟机上，但种种问题使得我的计划不了了之：\n本地Ruby包依赖管理器Bundler与Github不匹配，但受制于网络，无法自动获取对应版本的Bundler Obsidian编辑器在虚拟机上无法正常工作 无法正常输入中文（见下一节） 设置中文输入法 网上关于配置中文输入法是无论是iBus框架还是Fcitx框架，都需要在“语言支持”选项中切换语言为汉语，但不知为何我的语言选项中汉语被禁用了，但又处于已安装状态，这导致我不能在虚拟机内输入中文而必须要在外部创建一个文本交换文件，用着真的很不方便。\n这是为什么呢\n配置开机自启动脚本 起因：每次登录进Ubuntu是桌面环境都是默认关闭的，需要手动输入startvnc命令才能开始VNC连接，如果提前连接MobaXterm会卡死，因此想让虚拟机一开机就启动桌面环境。\n许多开机自启动的教程都是像这样：\nUbuntu22.04 rc-local 配置开机自启动脚本 - 博客园 ubuntu22.04 添加开机启动脚本 - 博客园 其基本思路不外乎修改或创建系统服务，但是在Ubuntu虚拟机上这行不通。修改rc-local.service服务后，我的虚拟机卡在开机界面进不去，自己创建的服务又无法正常工作（事实上桌面会直接卡死）。\n最后只能使用.bashrc，好像也没什么用（我的默认终端是Zsh，可能是要修改.zshrc）。\n后记 明天叕要开学了，假期过得真是快呀。还有很多的东西要学，还有很多的东西想学，不知何时能够再更一次？\n本来还想发一期WxPython学习笔记的，现在只好作罢。\n总之，下次再会吧！\n脚注 ubuntu 22.04 server设置中文 - 知乎\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTmoe-linux：在Android 和Windows10上一键安装 GNU/Linux容器 - 我的旅游记录\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nubuntu使用－ubuntu22.04关闭自动挂起功能 - 博客园\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUbuntu防止休眠和挂起（笔记） - CSDN\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-10-05T00:00:00Z","image":"https://raw.gitcode.com/areacloser/images-for-hugo-blog/raw/main/DM-20241006112629-001.png","permalink":"https://example.com/post/tips-for-ubuntu-vm/","title":"Ubuntu Server 22.04 避坑和配置指南"}]